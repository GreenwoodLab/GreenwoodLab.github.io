#             theta.temp <- theta + delta.theta
#             in.param.space <- theta.temp[1] > 0 & theta.temp[1] < 1 & theta.temp[2] > 0 & theta.temp[3] > 0
#         }
# stopping criteria
d1 <- dpois(j, lambda=theta[2])
d2 <- dpois(j, lambda=theta[3])
omegabar <- (theta[1]*d1)/(theta[1]*d1 + (1-theta[1])*d2)
gradient.current <- gradient(j=j,cj=cj, omega=theta[1], omegabar=omegabar, theta1=theta[2], theta2=theta[3])
rg.next <- rg(j=j,cj=cj, gradient=gradient.current, theta.current=theta, delta.theta=delta.theta);rg.next
keepgoing <- max(rg.next)>=epsilon;keepgoing
theta <- theta+delta.theta
g.tilde <- g.tilde + delta.g.tilde
i <- i+1
}
return(list(omega=theta[1],theta1=theta[2],theta2=theta[3], iter=i))
}
my.qn1(values[[1]], counts[[1]])
my.qn1 <- function(j,cj, omega.init=0.5, theta1.init=1, theta2.init=2, epsilon=1e-6, i=1, keepgoing=TRUE){
#j=values[[1]] ; cj=counts[[1]] ; omega.init=0.5; theta1.init=1;theta2.init=2;epsilon=1e-6;i=1;
theta <- c(omega.init, theta1.init, theta2.init)
g.tilde <- M.theta(j=j,cj=cj, theta=theta) - theta
A <- -diag(3)
while(keepgoing){
delta.theta <- -A%*%as.matrix(g.tilde)
delta.g.tilde <- M.theta(j=j,cj=cj, theta=theta+delta.theta)-(theta+delta.theta)-g.tilde
delta.A <- ((delta.theta-A%*% delta.g.tilde) %*% t(delta.theta)%*%A)*(1/(as.numeric(t(delta.theta)%*%A%*%delta.g.tilde)))
A <- A + delta.A
#keepgoing <- max(abs(delta.theta))>=epsilon
in.param.space <- (theta+delta.theta)[1] > 0 & (theta+delta.theta)[1] < 1 & (theta+delta.theta)[2] > 0 & (theta+delta.theta)[3] > 0 ; in.param.space
while(!in.param.space){
delta.theta <- delta.theta/2
#theta <- theta + delta.theta
theta.temp <- theta + delta.theta
in.param.space <- theta.temp[1] > 0 & theta.temp[1] < 1 & theta.temp[2] > 0 & theta.temp[3] > 0
}
# stopping criteria
d1 <- dpois(j, lambda=theta[2])
d2 <- dpois(j, lambda=theta[3])
omegabar <- (theta[1]*d1)/(theta[1]*d1 + (1-theta[1])*d2)
gradient.current <- gradient(j=j,cj=cj, omega=theta[1], omegabar=omegabar, theta1=theta[2], theta2=theta[3])
rg.next <- rg(j=j,cj=cj, gradient=gradient.current, theta.current=theta, delta.theta=delta.theta);rg.next
keepgoing <- max(rg.next)>=epsilon;keepgoing
theta <- theta+delta.theta
g.tilde <- g.tilde + delta.g.tilde
i <- i+1
}
return(list(omega=theta[1],theta1=theta[2],theta2=theta[3], iter=i))
}
my.qn1(values[[1]], counts[[1]])
my.qn1 <- function(j,cj, omega.init=0.5, theta1.init=1, theta2.init=2, epsilon=1e-6, i=1, keepgoing=TRUE){
#j=values[[1]] ; cj=counts[[1]] ; omega.init=0.5; theta1.init=1;theta2.init=2;epsilon=1e-6;i=1;
theta <- c(omega.init, theta1.init, theta2.init)
g.tilde <- M.theta(j=j,cj=cj, theta=theta) - theta
A <- -diag(3)
while(keepgoing){
delta.theta <- -A%*%as.matrix(g.tilde)/2
delta.g.tilde <- M.theta(j=j,cj=cj, theta=theta+delta.theta)-(theta+delta.theta)-g.tilde
delta.A <- ((delta.theta-A%*% delta.g.tilde) %*% t(delta.theta)%*%A)*(1/(as.numeric(t(delta.theta)%*%A%*%delta.g.tilde)))
A <- A + delta.A
#keepgoing <- max(abs(delta.theta))>=epsilon
in.param.space <- (theta+delta.theta)[1] > 0 & (theta+delta.theta)[1] < 1 & (theta+delta.theta)[2] > 0 & (theta+delta.theta)[3] > 0 ; in.param.space
while(!in.param.space){
delta.theta <- delta.theta/2
#theta <- theta + delta.theta
theta.temp <- theta + delta.theta
in.param.space <- theta.temp[1] > 0 & theta.temp[1] < 1 & theta.temp[2] > 0 & theta.temp[3] > 0
}
# stopping criteria
d1 <- dpois(j, lambda=theta[2])
d2 <- dpois(j, lambda=theta[3])
omegabar <- (theta[1]*d1)/(theta[1]*d1 + (1-theta[1])*d2)
gradient.current <- gradient(j=j,cj=cj, omega=theta[1], omegabar=omegabar, theta1=theta[2], theta2=theta[3])
rg.next <- rg(j=j,cj=cj, gradient=gradient.current, theta.current=theta, delta.theta=delta.theta);rg.next
keepgoing <- max(rg.next)>=epsilon;keepgoing
theta <- theta+delta.theta
g.tilde <- g.tilde + delta.g.tilde
i <- i+1
}
return(list(omega=theta[1],theta1=theta[2],theta2=theta[3], iter=i))
}
my.qn1(values[[1]], counts[[1]])
my.qn1 <- function(j,cj, omega.init=0.5, theta1.init=1, theta2.init=2, epsilon=1e-6, i=1, keepgoing=TRUE){
#j=values[[1]] ; cj=counts[[1]] ; omega.init=0.5; theta1.init=1;theta2.init=2;epsilon=1e-6;i=1;
theta <- c(omega.init, theta1.init, theta2.init)
g.tilde <- M.theta(j=j,cj=cj, theta=theta) - theta
A <- -diag(3)
while(keepgoing){
delta.theta <- -A%*%as.matrix(g.tilde)/as.numeric(2)
delta.g.tilde <- M.theta(j=j,cj=cj, theta=theta+delta.theta)-(theta+delta.theta)-g.tilde
delta.A <- ((delta.theta-A%*% delta.g.tilde) %*% t(delta.theta)%*%A)*(1/(as.numeric(t(delta.theta)%*%A%*%delta.g.tilde)))
A <- A + delta.A
#keepgoing <- max(abs(delta.theta))>=epsilon
in.param.space <- (theta+delta.theta)[1] > 0 & (theta+delta.theta)[1] < 1 & (theta+delta.theta)[2] > 0 & (theta+delta.theta)[3] > 0 ; in.param.space
while(!in.param.space){
delta.theta <- delta.theta/2
#theta <- theta + delta.theta
theta.temp <- theta + delta.theta
in.param.space <- theta.temp[1] > 0 & theta.temp[1] < 1 & theta.temp[2] > 0 & theta.temp[3] > 0
}
# stopping criteria
d1 <- dpois(j, lambda=theta[2])
d2 <- dpois(j, lambda=theta[3])
omegabar <- (theta[1]*d1)/(theta[1]*d1 + (1-theta[1])*d2)
gradient.current <- gradient(j=j,cj=cj, omega=theta[1], omegabar=omegabar, theta1=theta[2], theta2=theta[3])
rg.next <- rg(j=j,cj=cj, gradient=gradient.current, theta.current=theta, delta.theta=delta.theta);rg.next
keepgoing <- max(rg.next)>=epsilon;keepgoing
theta <- theta+delta.theta
g.tilde <- g.tilde + delta.g.tilde
i <- i+1
}
return(list(omega=theta[1],theta1=theta[2],theta2=theta[3], iter=i))
}
my.qn1(values[[1]], counts[[1]])
my.qn1 <- function(j,cj, omega.init=0.5, theta1.init=1, theta2.init=2, epsilon=1e-6, i=1, keepgoing=TRUE){
#j=values[[1]] ; cj=counts[[1]] ; omega.init=0.5; theta1.init=1;theta2.init=2;epsilon=1e-6;i=1;
theta <- c(omega.init, theta1.init, theta2.init)
g.tilde <- M.theta(j=j,cj=cj, theta=theta) - theta
A <- -diag(3)
while(keepgoing){
delta.theta <- -A%*%as.matrix(g.tilde)
delta.g.tilde <- M.theta(j=j,cj=cj, theta=theta+delta.theta)-(theta+delta.theta)-g.tilde
delta.A <- ((delta.theta-A%*% delta.g.tilde) %*% t(delta.theta)%*%A)*(1/(as.numeric(t(delta.theta)%*%A%*%delta.g.tilde)))
A <- A + delta.A
#keepgoing <- max(abs(delta.theta))>=epsilon
in.param.space <- (theta+delta.theta)[1] > 0 & (theta+delta.theta)[1] < 1 & (theta+delta.theta)[2] > 0 & (theta+delta.theta)[3] > 0 ; in.param.space
while(!in.param.space){
delta.theta <- delta.theta/2
#theta <- theta + delta.theta
theta.temp <- theta + delta.theta
in.param.space <- theta.temp[1] > 0 & theta.temp[1] < 1 & theta.temp[2] > 0 & theta.temp[3] > 0
}
# stopping criteria
d1 <- dpois(j, lambda=theta[2])
d2 <- dpois(j, lambda=theta[3])
omegabar <- (theta[1]*d1)/(theta[1]*d1 + (1-theta[1])*d2)
gradient.current <- gradient(j=j,cj=cj, omega=theta[1], omegabar=omegabar, theta1=theta[2], theta2=theta[3])
rg.next <- rg(j=j,cj=cj, gradient=gradient.current, theta.current=theta, delta.theta=delta.theta);rg.next
keepgoing <- max(rg.next)>=epsilon;keepgoing
theta <- theta+delta.theta
g.tilde <- g.tilde + delta.g.tilde
i <- i+1
}
return(list(omega=theta[1],theta1=theta[2],theta2=theta[3], iter=i))
}
my.qn1(values[[1]], counts[[1]])
my.qn1 <- function(j,cj, omega.init=0.5, theta1.init=1, theta2.init=2, epsilon=1e-6, i=1, keepgoing=TRUE){
#j=values[[1]] ; cj=counts[[1]] ; omega.init=0.5; theta1.init=1;theta2.init=2;epsilon=1e-6;i=1;
theta <- c(omega.init, theta1.init, theta2.init)
g.tilde <- M.theta(j=j,cj=cj, theta=theta) - theta
A <- -diag(3)
while(keepgoing){
delta.theta <- -A%*%as.matrix(g.tilde)
in.param.space <- (theta+delta.theta)[1] > 0 & (theta+delta.theta)[1] < 1 & (theta+delta.theta)[2] > 0 & (theta+delta.theta)[3] > 0 ; in.param.space
while(!in.param.space){
delta.theta <- delta.theta/2
#theta <- theta + delta.theta
theta.temp <- theta + delta.theta
in.param.space <- theta.temp[1] > 0 & theta.temp[1] < 1 & theta.temp[2] > 0 & theta.temp[3] > 0
}
delta.g.tilde <- M.theta(j=j,cj=cj, theta=theta+delta.theta)-(theta+delta.theta)-g.tilde
delta.A <- ((delta.theta-A%*% delta.g.tilde) %*% t(delta.theta)%*%A)*(1/(as.numeric(t(delta.theta)%*%A%*%delta.g.tilde)))
A <- A + delta.A
#keepgoing <- max(abs(delta.theta))>=epsilon
# stopping criteria
d1 <- dpois(j, lambda=theta[2])
d2 <- dpois(j, lambda=theta[3])
omegabar <- (theta[1]*d1)/(theta[1]*d1 + (1-theta[1])*d2)
gradient.current <- gradient(j=j,cj=cj, omega=theta[1], omegabar=omegabar, theta1=theta[2], theta2=theta[3])
rg.next <- rg(j=j,cj=cj, gradient=gradient.current, theta.current=theta, delta.theta=delta.theta);rg.next
keepgoing <- max(rg.next)>=epsilon;keepgoing
theta <- theta+delta.theta
g.tilde <- g.tilde + delta.g.tilde
i <- i+1
}
return(list(omega=theta[1],theta1=theta[2],theta2=theta[3], iter=i))
}
my.qn1(values[[1]], counts[[1]])
my.qn1(values[[2]], counts[[2]])
my.qn1(values[[3]], counts[[3]])
mapply(function(x,y,z) my.qn1(j=x, cj=y, epsilon=z), values, counts , 1e-6)
my.qn1 <- function(j,cj, omega.init=0.5, theta1.init=1, theta2.init=2, epsilon=1e-6, i=1, keepgoing=TRUE){
#j=values[[1]] ; cj=counts[[1]] ; omega.init=0.5; theta1.init=1;theta2.init=2;epsilon=1e-6;i=1;
theta <- c(omega.init, theta1.init, theta2.init)
g.tilde <- M.theta(j=j,cj=cj, theta=theta) - theta
A <- -diag(3)
while(keepgoing){
delta.theta <- -A%*%as.matrix(g.tilde)
# check if estimates lie in parameter space
in.param.space <- (theta+delta.theta)[1] > 0 & (theta+delta.theta)[1] < 1 & (theta+delta.theta)[2] > 0 & (theta+delta.theta)[3] > 0
while(!in.param.space){
delta.theta <- delta.theta/2
#theta <- theta + delta.theta
theta.temp <- theta + delta.theta
in.param.space <- theta.temp[1] > 0 & theta.temp[1] < 1 & theta.temp[2] > 0 & theta.temp[3] > 0
}
delta.g.tilde <- M.theta(j=j,cj=cj, theta=theta+delta.theta)-(theta+delta.theta)-g.tilde
delta.A <- ((delta.theta-A%*% delta.g.tilde) %*% t(delta.theta)%*%A)*(1/(as.numeric(t(delta.theta)%*%A%*%delta.g.tilde)))
A <- A + delta.A
# stopping criteria
d1 <- dpois(j, lambda=theta[2])
d2 <- dpois(j, lambda=theta[3])
omegabar <- (theta[1]*d1)/(theta[1]*d1 + (1-theta[1])*d2)
gradient.current <- gradient(j=j,cj=cj, omega=theta[1], omegabar=omegabar, theta1=theta[2], theta2=theta[3])
rg.next <- rg(j=j,cj=cj, gradient=gradient.current, theta.current=theta, delta.theta=delta.theta)
keepgoing <- max(rg.next)>=epsilon
theta <- theta+delta.theta
g.tilde <- g.tilde + delta.g.tilde
i <- i+1
}
return(list(omega=theta[1],theta1=theta[2],theta2=theta[3], iter=i))
}
mapply(function(x,y,z) my.qn1(j=x, cj=y, epsilon=z), values, counts , 1e-6)
my.em <- function (j,cj, omega.init=0.5, theta1.init=1, theta2.init=2, epsilon=1e-6, i=1, keepgoing=TRUE){
while(keepgoing){
#j=values[[1]];cj=counts[[1]];theta1.init=1;theta2.init=2;epsilon=1e-6;i=1;omega.init=0.5
d1 <- dpois(j, lambda=theta1.init)
d2 <- dpois(j, lambda=theta2.init)
omegabar <- (omega.init*d1)/(omega.init*d1 + (1-omega.init)*d2)
omega.next <- sum(cj*omegabar)/sum(cj)
theta1.next <- sum(j*cj*omegabar)/sum(cj*omegabar)
theta2.next <- sum(j*cj*(1-omegabar))/sum(cj*(1-omegabar))
theta.new <- c(omega.next, theta1.next, theta2.next)
theta.old <- c(omega.init, theta1.init, theta2.init)
delta.theta <- theta.old-theta.new
gradient.current <- gradient(j=j,cj=cj, omega=omega.init, omegabar=omegabar, theta1=theta1.init, theta2=theta2.init)
rg.next <- rg(j=j,cj=cj, gradient=gradient.current, theta.current=theta.old, delta.theta=delta.theta)
keepgoing <- max(rg.next)>=epsilon
omega.init <- omega.next
theta1.init <- theta1.next
theta2.init <- theta2.next
i <- i+1
}
return(list(omega=omega.next,theta1=theta1.next,theta2=theta2.next, iter=i))
}
values <- list(seq.int(0,6,1), seq.int(0,9,1),seq.int(0,6,1))
counts <- list(c(552,703,454,180,84,23,4), c(162,267,271,185,111,61,27,8,3,1), c(3062,587,284,103,33,4,2))
mapply(function(x,y,z) my.em(j=x, cj=y, epsilon=z), values, counts,1e-6)
# EM algorithm ------------------------------------------------------------
gradient <- function(j, cj, omega, omegabar, theta1, theta2){
dQ.domega <- (1/(omega*(1-omega)))*(sum(cj*(omegabar-omega)))
dQ.dtheta1 <- (1/theta1)*(sum(cj*omegabar*(j-theta1)))
dQ.dtheta2 <- (1/theta2)*(sum(cj*(1-omegabar)*(j-theta2)))
return(c(dQ.domega,dQ.dtheta1,dQ.dtheta2))
}
incomplete.log.lik <- function(j, cj, theta){
ell <- sum(cj*log(theta[1]*exp(-theta[2])*(theta[2]^j) +
(1-theta[1])*exp(-theta[3])*(theta[3]^j)))
return(ell)
}
rg <- function(j, cj, gradient, theta.current, delta.theta){
ratio <- abs(gradient)*(pmax(abs(theta.current+delta.theta), 1)/(pmax(abs(incomplete.log.lik(j=j, cj=cj,theta=theta.current+delta.theta)),1)))
return(ratio)
}
my.em <- function (j,cj, omega.init=0.5, theta1.init=1, theta2.init=2, epsilon=1e-6, i=1, keepgoing=TRUE){
while(keepgoing){
d1 <- dpois(j, lambda=theta1.init)
d2 <- dpois(j, lambda=theta2.init)
omegabar <- (omega.init*d1)/(omega.init*d1 + (1-omega.init)*d2)
omega.next <- sum(cj*omegabar)/sum(cj)
theta1.next <- sum(j*cj*omegabar)/sum(cj*omegabar)
theta2.next <- sum(j*cj*(1-omegabar))/sum(cj*(1-omegabar))
theta.new <- c(omega.next, theta1.next, theta2.next)
theta.old <- c(omega.init, theta1.init, theta2.init)
delta.theta <- theta.old-theta.new
gradient.current <- gradient(j=j,cj=cj, omega=omega.init, omegabar=omegabar, theta1=theta1.init, theta2=theta2.init)
rg.next <- rg(j=j,cj=cj, gradient=gradient.current, theta.current=theta.old, delta.theta=delta.theta)
keepgoing <- max(rg.next)>=epsilon
omega.init <- omega.next
theta1.init <- theta1.next
theta2.init <- theta2.next
i <- i+1
}
return(list(omega=omega.next,theta1=theta1.next,theta2=theta2.next, iter=i))
}
# QN1 algorithm ---------------------------------------------------------------------
M.theta <- function(j,cj, theta){
d1 <- dpois(j, lambda=theta[2])
d2 <- dpois(j, lambda=theta[3])
omegabar <- (theta[1]*d1)/(theta[1]*d1 + (1-theta[1])*d2)
omega.next <- sum(cj*omegabar)/sum(cj)
theta1.next <- sum(j*cj*omegabar)/sum(cj*omegabar)
theta2.next <- sum(j*cj*(1-omegabar))/sum(cj*(1-omegabar))
return(c(omega.next, theta1.next, theta2.next))
}
my.qn1 <- function(j,cj, omega.init=0.5, theta1.init=1, theta2.init=2, epsilon=1e-6, i=1, keepgoing=TRUE){
#j=values[[1]] ; cj=counts[[1]] ; omega.init=0.5; theta1.init=1;theta2.init=2;epsilon=1e-6;i=1;
theta <- c(omega.init, theta1.init, theta2.init)
g.tilde <- M.theta(j=j,cj=cj, theta=theta) - theta
A <- -diag(3)
while(keepgoing){
delta.theta <- -A%*%as.matrix(g.tilde)
# check if estimates lie in parameter space
in.param.space <- (theta+delta.theta)[1] > 0 & (theta+delta.theta)[1] < 1 & (theta+delta.theta)[2] > 0 & (theta+delta.theta)[3] > 0
while(!in.param.space){
delta.theta <- delta.theta/2
#theta <- theta + delta.theta
theta.temp <- theta + delta.theta
in.param.space <- theta.temp[1] > 0 & theta.temp[1] < 1 & theta.temp[2] > 0 & theta.temp[3] > 0
}
delta.g.tilde <- M.theta(j=j,cj=cj, theta=theta+delta.theta)-(theta+delta.theta)-g.tilde
delta.A <- ((delta.theta-A%*% delta.g.tilde) %*% t(delta.theta)%*%A)*(1/(as.numeric(t(delta.theta)%*%A%*%delta.g.tilde)))
A <- A + delta.A
# stopping criteria
d1 <- dpois(j, lambda=theta[2])
d2 <- dpois(j, lambda=theta[3])
omegabar <- (theta[1]*d1)/(theta[1]*d1 + (1-theta[1])*d2)
gradient.current <- gradient(j=j,cj=cj, omega=theta[1], omegabar=omegabar, theta1=theta[2], theta2=theta[3])
rg.next <- rg(j=j,cj=cj, gradient=gradient.current, theta.current=theta, delta.theta=delta.theta)
keepgoing <- max(rg.next)>=epsilon
theta <- theta+delta.theta
g.tilde <- g.tilde + delta.g.tilde
i <- i+1
}
return(list(omega=theta[1],theta1=theta[2],theta2=theta[3], iter=i))
}
values <- list(seq.int(0,6,1), seq.int(0,9,1),seq.int(0,6,1))
counts <- list(c(552,703,454,180,84,23,4), c(162,267,271,185,111,61,27,8,3,1), c(3062,587,284,103,33,4,2))
mapply(function(x,y,z) my.em(j=x, cj=y, epsilon=z), values, counts,1e-6)
mapply(function(x,y,z) my.qn1(j=x, cj=y, epsilon=z), values, counts , 1e-6)
lapply(1:3,function(i) {optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]]) } )
# EM algorithm ------------------------------------------------------------
gradient <- function(j, cj, omega, omegabar, theta1, theta2){
dQ.domega <- (1/(omega*(1-omega)))*(sum(cj*(omegabar-omega)))
dQ.dtheta1 <- (1/theta1)*(sum(cj*omegabar*(j-theta1)))
dQ.dtheta2 <- (1/theta2)*(sum(cj*(1-omegabar)*(j-theta2)))
return(c(dQ.domega,dQ.dtheta1,dQ.dtheta2))
}
incomplete.log.lik <- function(theta, j, cj){
ell <- sum(cj*log(theta[1]*exp(-theta[2])*(theta[2]^j) +
(1-theta[1])*exp(-theta[3])*(theta[3]^j)))
return(ell)
}
rg <- function(j, cj, gradient, theta.current, delta.theta){
ratio <- abs(gradient)*(pmax(abs(theta.current+delta.theta), 1)/(pmax(abs(incomplete.log.lik(j=j, cj=cj,theta=theta.current+delta.theta)),1)))
return(ratio)
}
my.em <- function (j,cj, omega.init=0.5, theta1.init=1, theta2.init=2, epsilon=1e-6, i=1, keepgoing=TRUE){
while(keepgoing){
d1 <- dpois(j, lambda=theta1.init)
d2 <- dpois(j, lambda=theta2.init)
omegabar <- (omega.init*d1)/(omega.init*d1 + (1-omega.init)*d2)
omega.next <- sum(cj*omegabar)/sum(cj)
theta1.next <- sum(j*cj*omegabar)/sum(cj*omegabar)
theta2.next <- sum(j*cj*(1-omegabar))/sum(cj*(1-omegabar))
theta.new <- c(omega.next, theta1.next, theta2.next)
theta.old <- c(omega.init, theta1.init, theta2.init)
delta.theta <- theta.old-theta.new
gradient.current <- gradient(j=j,cj=cj, omega=omega.init, omegabar=omegabar, theta1=theta1.init, theta2=theta2.init)
rg.next <- rg(j=j,cj=cj, gradient=gradient.current, theta.current=theta.old, delta.theta=delta.theta)
keepgoing <- max(rg.next)>=epsilon
omega.init <- omega.next
theta1.init <- theta1.next
theta2.init <- theta2.next
i <- i+1
}
return(list(omega=omega.next,theta1=theta1.next,theta2=theta2.next, iter=i))
}
# QN1 algorithm ---------------------------------------------------------------------
M.theta <- function(j,cj, theta){
d1 <- dpois(j, lambda=theta[2])
d2 <- dpois(j, lambda=theta[3])
omegabar <- (theta[1]*d1)/(theta[1]*d1 + (1-theta[1])*d2)
omega.next <- sum(cj*omegabar)/sum(cj)
theta1.next <- sum(j*cj*omegabar)/sum(cj*omegabar)
theta2.next <- sum(j*cj*(1-omegabar))/sum(cj*(1-omegabar))
return(c(omega.next, theta1.next, theta2.next))
}
my.qn1 <- function(j,cj, omega.init=0.5, theta1.init=1, theta2.init=2, epsilon=1e-6, i=1, keepgoing=TRUE){
#j=values[[1]] ; cj=counts[[1]] ; omega.init=0.5; theta1.init=1;theta2.init=2;epsilon=1e-6;i=1;
theta <- c(omega.init, theta1.init, theta2.init)
g.tilde <- M.theta(j=j,cj=cj, theta=theta) - theta
A <- -diag(3)
while(keepgoing){
delta.theta <- -A%*%as.matrix(g.tilde)
# check if estimates lie in parameter space
in.param.space <- (theta+delta.theta)[1] > 0 & (theta+delta.theta)[1] < 1 & (theta+delta.theta)[2] > 0 & (theta+delta.theta)[3] > 0
while(!in.param.space){
delta.theta <- delta.theta/2
#theta <- theta + delta.theta
theta.temp <- theta + delta.theta
in.param.space <- theta.temp[1] > 0 & theta.temp[1] < 1 & theta.temp[2] > 0 & theta.temp[3] > 0
}
delta.g.tilde <- M.theta(j=j,cj=cj, theta=theta+delta.theta)-(theta+delta.theta)-g.tilde
delta.A <- ((delta.theta-A%*% delta.g.tilde) %*% t(delta.theta)%*%A)*(1/(as.numeric(t(delta.theta)%*%A%*%delta.g.tilde)))
A <- A + delta.A
# stopping criteria
d1 <- dpois(j, lambda=theta[2])
d2 <- dpois(j, lambda=theta[3])
omegabar <- (theta[1]*d1)/(theta[1]*d1 + (1-theta[1])*d2)
gradient.current <- gradient(j=j,cj=cj, omega=theta[1], omegabar=omegabar, theta1=theta[2], theta2=theta[3])
rg.next <- rg(j=j,cj=cj, gradient=gradient.current, theta.current=theta, delta.theta=delta.theta)
keepgoing <- max(rg.next)>=epsilon
theta <- theta+delta.theta
g.tilde <- g.tilde + delta.g.tilde
i <- i+1
}
return(list(omega=theta[1],theta1=theta[2],theta2=theta[3], iter=i))
}
values <- list(seq.int(0,6,1), seq.int(0,9,1),seq.int(0,6,1))
counts <- list(c(552,703,454,180,84,23,4), c(162,267,271,185,111,61,27,8,3,1), c(3062,587,284,103,33,4,2))
mapply(function(x,y,z) my.em(j=x, cj=y, epsilon=z), values, counts,1e-6)
mapply(function(x,y,z) my.qn1(j=x, cj=y, epsilon=z), values, counts , 1e-6)
lapply(1:3,function(i) {optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]]) } )
i=1
optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]])
lapply(1:3,function(i) {optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]], lower=0) } )
lapply(1:3,function(i) {optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]], control=list(fnscale=-1)) } )
i=1
optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]], control=list(fnscale=-1))
i=2
optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]], control=list(fnscale=-1))
i=3
optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]], control=list(fnscale=-1))
mapply(function(x,y,z) my.em(j=x, cj=y, epsilon=z), values, counts,1e-6)
mapply(function(x,y,z) my.qn1(j=x, cj=y, epsilon=z), values, counts , 1e-6)
lapply(1:3,function(i) {optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]], control=list(fnscale=-1)) } )
lapply(1:3,function(i) {optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]], control=list(fnscale=-1))$par } )
sapply(1:3,function(i) {optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]], control=list(fnscale=-1))$par } )
library(plyr)
ldply(1:3,function(i) {optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]], control=list(fnscale=-1))$par } )
sapply(1:3,function(i) {optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]], control=list(fnscale=-1))$par } )
lapply(1:3,function(i) {optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]], control=list(fnscale=-1))$par } )
# EM algorithm ------------------------------------------------------------
gradient <- function(j, cj, omega, omegabar, theta1, theta2){
dQ.domega <- (1/(omega*(1-omega)))*(sum(cj*(omegabar-omega)))
dQ.dtheta1 <- (1/theta1)*(sum(cj*omegabar*(j-theta1)))
dQ.dtheta2 <- (1/theta2)*(sum(cj*(1-omegabar)*(j-theta2)))
return(c(dQ.domega,dQ.dtheta1,dQ.dtheta2))
}
incomplete.log.lik <- function(theta, j, cj){
ell <- sum(cj*log(theta[1]*exp(-theta[2])*(theta[2]^j) +
(1-theta[1])*exp(-theta[3])*(theta[3]^j)))
return(ell)
}
rg <- function(j, cj, gradient, theta.current, delta.theta){
ratio <- abs(gradient)*(pmax(abs(theta.current+delta.theta), 1)/(pmax(abs(incomplete.log.lik(j=j, cj=cj,theta=theta.current+delta.theta)),1)))
return(ratio)
}
my.em <- function (j,cj, omega.init=0.5, theta1.init=1, theta2.init=2, epsilon=1e-6, i=1, keepgoing=TRUE){
while(keepgoing){
d1 <- dpois(j, lambda=theta1.init)
d2 <- dpois(j, lambda=theta2.init)
omegabar <- (omega.init*d1)/(omega.init*d1 + (1-omega.init)*d2)
omega.next <- sum(cj*omegabar)/sum(cj)
theta1.next <- sum(j*cj*omegabar)/sum(cj*omegabar)
theta2.next <- sum(j*cj*(1-omegabar))/sum(cj*(1-omegabar))
theta.new <- c(omega.next, theta1.next, theta2.next)
theta.old <- c(omega.init, theta1.init, theta2.init)
delta.theta <- theta.old-theta.new
gradient.current <- gradient(j=j,cj=cj, omega=omega.init, omegabar=omegabar, theta1=theta1.init, theta2=theta2.init)
rg.next <- rg(j=j,cj=cj, gradient=gradient.current, theta.current=theta.old, delta.theta=delta.theta)
keepgoing <- max(rg.next)>=epsilon
omega.init <- omega.next
theta1.init <- theta1.next
theta2.init <- theta2.next
i <- i+1
}
return(list(omega=omega.next,theta1=theta1.next,theta2=theta2.next, iter=i))
}
# QN1 algorithm ---------------------------------------------------------------------
M.theta <- function(j,cj, theta){
d1 <- dpois(j, lambda=theta[2])
d2 <- dpois(j, lambda=theta[3])
omegabar <- (theta[1]*d1)/(theta[1]*d1 + (1-theta[1])*d2)
omega.next <- sum(cj*omegabar)/sum(cj)
theta1.next <- sum(j*cj*omegabar)/sum(cj*omegabar)
theta2.next <- sum(j*cj*(1-omegabar))/sum(cj*(1-omegabar))
return(c(omega.next, theta1.next, theta2.next))
}
my.qn1 <- function(j,cj, omega.init=0.5, theta1.init=1, theta2.init=2, epsilon=1e-6, i=1, keepgoing=TRUE){
#j=values[[1]] ; cj=counts[[1]] ; omega.init=0.5; theta1.init=1;theta2.init=2;epsilon=1e-6;i=1;
theta <- c(omega.init, theta1.init, theta2.init)
g.tilde <- M.theta(j=j,cj=cj, theta=theta) - theta
A <- -diag(3)
while(keepgoing){
delta.theta <- -A%*%as.matrix(g.tilde)
# check if estimates lie in parameter space
in.param.space <- (theta+delta.theta)[1] > 0 & (theta+delta.theta)[1] < 1 & (theta+delta.theta)[2] > 0 & (theta+delta.theta)[3] > 0
while(!in.param.space){
delta.theta <- delta.theta/2
#theta <- theta + delta.theta
theta.temp <- theta + delta.theta
in.param.space <- theta.temp[1] > 0 & theta.temp[1] < 1 & theta.temp[2] > 0 & theta.temp[3] > 0
}
delta.g.tilde <- M.theta(j=j,cj=cj, theta=theta+delta.theta)-(theta+delta.theta)-g.tilde
delta.A <- ((delta.theta-A%*% delta.g.tilde) %*% t(delta.theta)%*%A)*(1/(as.numeric(t(delta.theta)%*%A%*%delta.g.tilde)))
A <- A + delta.A
# stopping criteria
d1 <- dpois(j, lambda=theta[2])
d2 <- dpois(j, lambda=theta[3])
omegabar <- (theta[1]*d1)/(theta[1]*d1 + (1-theta[1])*d2)
gradient.current <- gradient(j=j,cj=cj, omega=theta[1], omegabar=omegabar, theta1=theta[2], theta2=theta[3])
rg.next <- rg(j=j,cj=cj, gradient=gradient.current, theta.current=theta, delta.theta=delta.theta)
keepgoing <- max(rg.next)>=epsilon
theta <- theta+delta.theta
g.tilde <- g.tilde + delta.g.tilde
i <- i+1
}
return(list(omega=theta[1],theta1=theta[2],theta2=theta[3], iter=i))
}
values <- list(seq.int(0,6,1), seq.int(0,9,1),seq.int(0,6,1))
counts <- list(c(552,703,454,180,84,23,4), c(162,267,271,185,111,61,27,8,3,1), c(3062,587,284,103,33,4,2))
mapply(function(x,y,z) my.em(j=x, cj=y, epsilon=z), values, counts,1e-6)
mapply(function(x,y,z) my.qn1(j=x, cj=y, epsilon=z), values, counts , 1e-6)
# Optim -------------------------------------------------------------------
lapply(1:3,function(i) {optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]], control=list(fnscale=-1))$par } )
lapply(1:3,function(i) {optim(c(0.5,1,2), fn=incomplete.log.lik,j=values[[i]], cj=counts[[i]], control=list(fnscale=-1,trace=10,maxit=10000))$par } )
setwd("~/git_repositories/greenwoodweb")
library(servr)
library(knitr)
jekyll(script = "_knitr/build.R")
jekyll(script = "_knitr/build.R")
